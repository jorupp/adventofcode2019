using System;
using System.Collections.Generic;
using System.Linq;
using AoC.GraphSolver;

namespace AoC.Year2019.Day18
{
    public class Part2 : BasePart
    {
        protected void RunScenario(string title, string input)
        {
            RunScenario(title, () =>
            {
                var lines = input.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                var map = lines.SelectMany((i, y) => i.Select((ii, x) => new { x, y, v = ii }))
                    .ToDictionary(i => (i.x, i.y), i => i.v);

                void Dump()
                {
                    var nmx = map.Keys.Min(i => i.Item1);
                    var nmy = map.Keys.Min(i => i.Item2);
                    var mx = map.Keys.Max(i => i.Item1);
                    var my = map.Keys.Max(i => i.Item2);

                    for (var y = nmx; y <= my; y++)
                    {
                        for (var x = nmy; x <= mx; x++)
                        {
                            var value = (map.TryGetValue((x, y), out var v) ? v : ' ');
                            Console.Write(value);
                        }
                        Console.WriteLine();
                    }
                    Console.WriteLine();
                }

                //Dump();

                var startP = map.Where(i => i.Value == '@').Select(i => i.Key).ToList();
                var startX = startP.Select(i => i.x).ToArray();
                var startY = startP.Select(i => i.y).ToArray();
                var start = new MapNode(startX, startY, 0, map, new HashSet<char>(), map.Values.Count(i => char.IsLower(i)));
                var solution = new RealSolver().Evaluate<MapNode, string, int>(start);

                Console.WriteLine(solution.CurrentCost);
            });
        }


        private class MapNode : Node<MapNode, string, int>
        {
            private int[] _x;
            private int[] _y;
            private int _cost;
            private Dictionary<(int, int), char> _map;
            private HashSet<char> _keys;
            private readonly int _numKeys;

            public MapNode(int[] x, int[] y, int cost, Dictionary<(int, int), char> map, HashSet<char> keys, int numKeys)
            {
                _x = x;
                _y = y;
                _cost = cost;
                _map = map;
                _keys = keys;
                _numKeys = numKeys;
            }

            public override IEnumerable<MapNode> GetAdjacent()
            {
                var dirs = new Dictionary<int, (int, int)>()
                {
                    {1, (0, -1)},
                    {2, (0, 1)},
                    {3, (-1, 0)},
                    {4, (1, 0)},
                };
                for (var r = 0; r < _x.Length; r++)
                {
                    foreach (var dir in dirs.Values)
                    {
                        var nextX = _x[r] + dir.Item1;
                        var nextY = _y[r] + dir.Item2;
                        var nextV = _map.TryGetValue((nextX, nextY), out var v) ? v : '#';
                        if (nextV == '#')
                            continue;

                        if (char.IsUpper(nextV))
                        {
                            if (!_keys.Contains(char.ToLower(nextV)))
                            {
                                continue;
                            }
                        }

                        var keys = new HashSet<char>(_keys);
                        if (char.IsLower(nextV))
                        {
                            keys.Add(nextV);
                        }

                        var nX = _x.ToArray();
                        var nY = _y.ToArray();
                        nX[r] = nextX;
                        nY[r] = nextY;

                        yield return new MapNode(nX, nY, _cost + 1, _map, keys, _numKeys);
                    }
                }
            }

            public override bool IsValid
            {
                get { return true; }
            }

            public override bool IsComplete
            {
                get { return _numKeys == _keys.Count; }
            }

            public override int CurrentCost
            {
                get { return _cost; }
            }

            public override int EstimatedCost
            {
                get { return CurrentCost + (_numKeys - _keys.Count); }
            }

            protected override string GetKey()
            {
                return (string.Concat(new []
                    {
                        string.Join(",", _x),
                        ",",
                        string.Join(",", _y),
                        ",",
                        string.Join(",", _keys.OrderBy(i => i)),
                    }));
            }

            public override string Description
            {
                get { return $"{_x},{_y},{string.Join(",", _keys.OrderBy(i => i))} = {_cost}"; }
            }
        }


        public override void Run()
        {
            RunScenario("initial", @"#######
#a.#Cd#
##@#@##
#######
##@#@##
#cB#Ab#
#######");

            RunScenario("initial", @"###############
#d.ABC.#.....a#
######@#@######
###############
######@#@######
#b.....#.....c#
###############");

            RunScenario("initial", @"#############
#DcBa.#.GhKl#
#.###@#@#I###
#e#d#####j#k#
###C#@#@###J#
#fEbA.#.FgHi#
#############");

            RunScenario("initial", @"#############
#g#f.D#..h#l#
#F###e#E###.#
#dCba@#@BcIJ#
#############
#nK.L@#@G...#
#M###N#H###.#
#o#m..#i#jk.#
#############");

            //return;
            RunScenario("part1", @"#################################################################################
#z..........................#....k#.....#.......#.....#.............#...#.......#
#.###############.#########.#.###.#.###.#Q#######.#.###.#####.#####.#.#.#.#.###.#
#...#...#.....#...#.....#...#.#.#.#...#.#.#.......#..u#..i#.#...#.#.#.#...#...#j#
###W#.#.#####B#.#####.#.#.###.#.#.###.#.#.#.#########.###.#.###.#.#.#.#######.#.#
#.#...#.#...#.#.....#.#.......#.#...#.#.#...#...#.....#.#...#.#.#...#.#.....#.#.#
#.#####.#.#.#.#####.###########.###.#.#.#.###.#.#.###.#.###.#.#.#.#####.###.#.#.#
#...#...#.#.......#.......#.....#...#.#.#...#.#.#.#...#...#.#.#.#.#...#...#...#.#
#.#.#.###.#######.#######.###.###.#####.###.#.#.#.#.###.###.#.#.#.#.#.#.#.#####.#
#.#.#.....#.....#.#.......#...#...#.....#.#.#.#.#.#.....#...#.#.#...#.#.#...#...#
#.#.#######.###.#.#.#######.###.###.###.#.#.#.###.#######N###.#.#####.###.#.#.###
#.#...#...#...#...#.#...#.....#.#.....#.#...#...#.......#.#...#.....#...#.#.#.#.#
###.#.#.#.###.#####.#.#.#.###.#.#.###.#.#.#####.#######.#.###.#####.###.###.#.#.#
#...#.#.#...#.#...#.#.#...#...#.#.#...#.#.#.O...#.....#...#.....#...#.......#...#
#.###.#.#.###.###.#.###.###.###.#.#.###.#.#.#####.###.#.###.###.#.#############.#
#.#...#.#.........#...#...#.....#.#.#.#.#...#.....#...#.#...#.#.#.....#.........#
#.#####.#############.###.#####.###.#.#.###.#.#####.###.#.###.#.#####.#.#########
#.#...#.#.#.........#.#...#...#.....#...#...#.#...#.#.....#.........#.#.#.....#.#
#.#.#.#.#.#.#######.#.#####.#.###########.###.#.###.#################.#.#.###.#.#
#.#.#.#...#.#.....#...#...#.#.#.........#...#.#...#.......#.....#....w#.#.#.#.#.#
#.#.#.###.#.###.#.#.###.#.#.#.#.#######.###.#.#.#.#######.#.###.#.#####.#.#.#.#.#
#...#.#...#...#.#.#.#...#.#.#...#.#...#.#...#.#.#...#.......#.#...#...#...#.#.#.#
#.###.#.#####.#.###.#####.#.#####.#.#.#.#.###.###.#.#.#####.#.#####.#.#####.#.#.#
#...#.#.#...#.#.........#.#.#...#...#...#...#...#.#...#...#.#...#...#...#...#.#.#
#####.#.#.###.#.#######.#.#.###.#.#########.###.#######.#.#####.###.#####.#.#.#.#
#.....#.#...#.#.#...#...#...#...#.#.....#.#...#.#...#...#...#...#...#.....#...#.#
#.#.###.###.#.###.#.#.#######.#.#.#.###.#.###.#.#.#.#.#####.#.###.###M#########.#
#.#.#...#...#.....#.#...#.....#.#.#.#.#.#.#...#...#.#.#.....#.#.#...#.........#.#
#.###.###.#.#######.#####.#.#####.#.#.#.#.#.#######.#.#.###.#.#.#.#.#########.#.#
#.....#...#.#.....#.......#...#...#.#...#.#.#.....#.#.#.#...#.#...#...........#.#
#.#####.#.###.###.###########.#.###.#####.#.###.###.#.#.#####.#.#####.#######.#.#
#.#.....#.#...#.......#.....#...#...#...#.#...#...#.#.#.....#.#.#...#.#.....#...#
#.###.#.###.###.#####.###.#######.#.#.#.#.###.###.#.#.#####.#.###.#.###.###.#####
#...#.#.....#.#.....#...#.........#.#.#.#...#...#.#...#.....#.....#...#...#.....#
###.#######.#.#####.###.###.#########.#.###.###.#.#####.#############.###.#####.#
#.#...#...#...#...#...#...#.....#.....#.#.....#.......#.#...#.......#.....#.D.#.#
#.###.#.#.###.###.###.###.###.#.#.#####.#.###.#####.###.#.#.#.###.#.#########.#.#
#...#...#...#.......#...#.E.#.#...#...#.#...#.#.....#...#.#...#...#.#.........#c#
#.#.#######.###########.###.#######.#.#.#.#.###.#####.###.#####.#####.#####.###.#
#.#.....................#...........#..@#@#.........#.........#...........#.....#
#################################################################################
#.......#.....#.........#...........#..@#@........#.....#...#.......#...........#
#.#####.#.###.#.#####.###.#####.###.###.#.###.###.###.###.#.#.#.###.#.#####.###.#
#.#...#.#.#...#.T...#.....#...#.#.....#.#.#...#.#.....#...#.#.#.#...#....a#...#.#
#.#.#.###.#.#######.#####.#.#.#.#####.#.#.#.###.#####.#.###.#.#.#########.###.#.#
#...#.....#.........#...#...#.#.....#...#.#.#........e#...#...#.S.#.......#...#.#
#####################.#.###########.###.#.#.#.###########.#######.#.#######.###.#
#d..#...#.........C...#.#.......#...#...#.#.#.#.........#.#.#.....#.#...#...#..y#
#.#.#.#.#.#########.###.#.#####.#.###.###.#.###.#######.#.#.#.#####.###.#.###.###
#.#.#.#.......#...#.#...#.#.....#.#...#.#.#...#...#...#...#.#.....#.#...#.#.....#
#.#.#.#########.#.###.###.###.###.#.###.#.###.###.#.#######.#####.#.#.###.#####.#
#.#...#.#.......#.#.G.#.....#.....#...#.#.#...#...#.....#.....#.#...#...#.....#.#
#.#####.#.#######.#.###.###.#########.#.#.#.###.#####.#.#.#.#.#.#######.#####.#.#
#.#.....#.#.........#...#.#.....#...#.#.#.#.#...#...#.#.#.#.#.#.......#.....#.#.#
#Y###.###F#############.#.#####.###.#.#.#.#.#.###.#.#.#.###.#.#####.#.#####.#.#.#
#...#.#...#.....P.....#.......#...#.....#.#.#.....#...#.....#.#.....#.#.....#.#.#
###.#.#.#.#.#########.#######.###.#####.###.#################.#.#####.#.#####.#.#
#...#.#.#.#r#.........#.........#.....#.#...#...#o..........#...#.......#.....#.#
#.###.#.###.#######.###############.#.###.###.#.#.#.#####.###.###########.#####.#
#.#...#...#.......#.....#...#.....#.#...#.....#.#.#.....#.#...#........p#.#...#.#
#.#.#.###.#######.#####.#.#.#.###.#####.#.#####.#.#####.###.###.#######.#.#.###.#
#...#.A.#...X...#.#...#.#.#...#.#.#...#.#..t#.#...#...#...#.#...#...#...#.#.....#
#######.#######.#.#R###.#.#####.#.#.#.#.###.#.#####.#####.#.#####.#.#.###.#######
#.#.....#...#...#...#...#...#.#...#.#...#.#.........#q....#.#...#.#...#.........#
#.#.#####.###.#######V###.#.#.#.###.#####.#########.#.#####.#.#.#.#########.###.#
#.#.#.....#...#.....#...#.#.#...#.......#...#.......#.....#.#.#.#v#.......#...#.#
#.#.#.#.###.#.#.#.#.###.#.#.#.#####.###.#.#.#.###########.#.###.#.###.###.###.#.#
#.#.#.#.#...#.#.#.#.#...#.#.#.#...#...#.#.#.#.......#...#.#b..#.#.#...#.#...#.#.#
#.#.#.#.#.###.#.#.###.#####.#.#.#.#####.###.#.#######.#.#.###.#.#.#.###.###.###.#
#...#.#m#...#.#l#.....#.....#.I.#.#...#.#...#.#.......#.....#...#.#.#g....#.#...#
#.#####.###.#.#.#########.#######.#.#.#.#.###.#.#############.###.#.#####.#.#.#.#
#.#.......#.#.#...#.....#.#.#...#...#.#.#...#.#.....#.........#...#....f#.....#.#
#.#.#####.#.#####.#.#.#.#.#.#.#.#####.#.#.#.#.#####.#.#########L#######.#########
#.#...#.#.#.....H.#.#.#...#...#.#...#.#.#.#.....#...#...#.......#.....#.........#
#.###.#.#.#########.#.#####.###.#.#.#.#.#.#######.#####.#.#######.###.#.#######.#
#.....#.#.#...#.....#.Z...#...#.#.#...#.#.#...#...#.....#...#.#.....#.#.......#.#
#######.#.#.#.#.#####.###.###.#.#.#####.#.#.#.#.#U#.#######.#.#.###.#.#########.#
#..s......#.#.#.#...#...#.#...#.#.......#...#.#.#.#...#.....#.....#.#.....#.....#
#.#########.#.###.#.#####.#.###.#######.#####.#.#####.#.###########.#####.#.###.#
#.......K...#...J.#.......#...#........n#.....#.......#............h#......x#...#
#################################################################################");

        }
    }
}
